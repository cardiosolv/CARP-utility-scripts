#!/usr/bin/env perl -w

use strict;

sub usage {

  print <<__HERE
Usage:
  $0 name.tetras
  $0 name.elem
    Searches for unreferenced nodes in the current mesh.
  $0 name.rmnodes
    Removes the specified nodes from the pts, tetras, set, and tri files.

__HERE
;

  die join("\n", @_);
}


sub new_node_index($\@) {
    # modified binary search, pretend each entry marks a range, find lower bound.
    my ($x, $a) = @_;            # search for x in array a
    my ($l, $u) = (0, @$a - 1);  # lower, upper end of search interval
    my $i;                       # index of probe
    return 0 if $x < $a->[$l];
    return scalar(@$a) if $x >= $a->[$u];
    while ($l < $u-1) {
	$i = int(($l + $u)/2);
	if ($a->[$i] < $x) {
	    $l = $i;
	}
	elsif ($a->[$i] > $x) {
	    $u = $i;
	} 
    }
    return $l+1;
}

sub clean_file(\@$) {
##################################################
# Searches a file filled with numbers, replaces each number with it's new
# equivalent in the new mesh.
# P: \@bad_nodes: list of nodes we should remove.
# P: $file - file to clean
# P: $file_has_header - true if the file has a header, false otherwise.

  my ($bad_nodes, $file) = @_;

  rename $file, "$file.bak" or die "Can't move $file to $file.bak: $!";
  open(TETIN, "$file.bak") or die "Can't open file $file.bak: $!";
  open(TETOUT, ">$file") or die "Can't open file $file for writing: $!";
  my $line;
  if ($file =~ /tetras$/
      or $file =~ /tris$/
      ) {
    $line = <TETIN>;
    print TETOUT $line;
  }

  while ($line = <TETIN>) {
    chomp($line);
    my @nodes = split(/\s+/,$line);
    my $header = "";
    my $footer = "\n";
    if ($file =~ /tetras$/) {
      $footer = " " . pop(@nodes) . "\n";
    } elsif ($file =~ /elem$/) {
      $footer = " " . pop(@nodes) . "\n";
      $header = shift(@nodes) . " ";
    }
    foreach my $node (@nodes) {
      $node = $node - new_node_index($node, @$bad_nodes);
      #$node = new_node_index($node, @bad_nodes);
    }
    print TETOUT $header . join(" ", @nodes) . $footer;
  }
  close(TETIN);
  close(TETOUT);
}

sub get_files_with_extension($$) {
############################################
# P: $name
# P: $ext
# R: files in directory of $name with extension $ext

  my ($name, $ext) = @_;

  # get the directory to search
  my $dir = $name;
  if ($dir !~ m,^/,) {
    $dir = "./$dir"
  }
  $dir =~ s,/.*?$,/,;
  
  my @extfiles;
  opendir(DIR, $dir) or die "Can't open directory '$dir' for reading: $!";
  foreach my $file (readdir DIR) {
    if ($file =~ m,\.$ext$,) {
      push @extfiles, $file;
    }
  }
  closedir(DIR);

  return @extfiles;
}

#####################################################################

usage() if not scalar(@ARGV);
my $name = shift @ARGV;
my $rmnodes_file = "";
if ($name =~ /\.rmnodes$/) {
  $rmnodes_file = $name;
}
my $elem_file = "";
if ($name =~ /\.elem$/) {
  $elem_file = $name;
}
#extract the first part of the file.
$name =~ s,\..*?$,,;

if (not $rmnodes_file) {
  my @bad_nodes;
  if (not $elem_file) {
    my $tetrafile = "$name.tetras";

    open(TETRAS, $tetrafile) or die "Can't open file $tetrafile";
    my $line = <TETRAS>;
    
    my %node_set; 
    while ($line = <TETRAS>) {
      chomp($line);
      my @nodes = split(/\s+/,$line);
      pop @nodes;
      foreach my $node (@nodes) {
	$node_set{$node} = 1;
      }
    }
    
    close(TETRAS);
    
    my $npoints;
    {
      my $text = (`wc -l $name.pts`);
      die if not $text =~ /(\d+)/;
      $npoints = $1;
      $npoints--;
    }
    
    for(my $node=1; $node<=$npoints; $node++) {
      if (not defined($node_set{$node})) {
	push @bad_nodes, $node;
      }
    }
  } else {
    open(TETRAS, $elem_file) or die "Can't open file $elem_file";
    my $line = <TETRAS>;
    
    my %node_set;
    while ($line = <TETRAS>) {
      chomp($line);
      my @nodes = split(/\s+/,$line);
      shift @nodes;
      pop @nodes;
      foreach my $node (@nodes) {
	$node_set{$node} = 1;
      }
    }
    
    close(TETRAS);
    
    my $npoints;
    {
      my $text = (`wc -l $name.pts`);
      die if not $text =~ /(\d+)/;
      $npoints = $1;
      $npoints--;
    }
    
    for(my $node=0; $node<$npoints; $node++) {
      if (not defined($node_set{$node})) {
	push @bad_nodes, $node;
      }
    }
  }

  if (scalar(@bad_nodes)) {
    open(RMNODES, ">$name.rmnodes") or die "Can't open $name.rmnodes for writing: $!\n";
    if ($elem_file) {
      print RMNODES "carp\n";
    } else {
      print RMNODES "memfem\n";
    }
    print RMNODES join("\n", @bad_nodes) . "\n";
    close(RMNODES);
    print "Found " . scalar(@bad_nodes) . " bad nodes:\n";
    print "Type the following command to clean your files.\n";
    print "$0 $name.rmnodes\n";
  } else {
    print "Mesh looks ok.\n"
  }
} else  {
  # turn on flushing for stdout.
  my $ofh = select STDOUT;
  $| = 1;
  select $ofh;

  #read in the list of bad nodes
  open(RMNODES, $rmnodes_file) or die "Can't open $rmnodes_file for reading: $!\n";
  my @bad_nodes;
  my $type;
  {
    $type = <RMNODES>;
    chomp $type;
    my $line;
    while ($line = <RMNODES>) {
      chomp $line;
      push @bad_nodes, $line;
    }
  }
  close(RMNODES);
  @bad_nodes = sort { $a <=> $b } @bad_nodes;


  #Clean the files.
  if (not -e "$name.pts") {
    print "Can't find $name.pts, skipping.\n"
  } else {
    print "Cleaning $name.pts... ";
    rename "$name.pts", "$name.pts.bak" or die "Can't move $name.pts to $name.pts.bak: $!";
    open(PTSIN, "$name.pts.bak") or die "Can't open file $name.pts.bak: $!";
    open(PTSOUT, ">$name.pts") or die "Can't open file $name.pts for writing: $!";
    my $temp = <PTSIN>;
    chomp $temp;
    print PTSOUT $temp-scalar(@bad_nodes) . "\n";
    {
      my @rm_nodes = @bad_nodes;
      push @rm_nodes, -1; # we never remove line -1.
      my $lineno;
      if ($type eq "memfem") {
	$lineno = 1;
      } else {
	$lineno = 0;
      }
      my $line;
      while ($line = <PTSIN>) {
	if ($lineno == $rm_nodes[0]) {
	  shift @rm_nodes;
	} else {
	  print PTSOUT $line;
	}
	$lineno++;
      }
    }
    close(PTSIN);
    close(PTSOUT);
    print "done.\n"
  }

  if ($type eq "memfem") {
    if (not -e "$name.tetras") {
      print "Can't find $name.tetras, skipping.\n";
    } else {
      print "Cleaning $name.tetras... ";
      clean_file(@bad_nodes, "$name.tetras");
      print "done.\n"
    }

    print "Searching for tri files... ";
    my @trifiles = get_files_with_extension($name, "tri");
    if (not scalar(@trifiles)) {
      print "couldn't find any tri files, skipping.\n";
    } else {
      print "found " . join(" ", @trifiles) . ".\n";
      foreach my $file (@trifiles) {
	print "Cleaning $file... ";
	clean_file(@bad_nodes, $file);
	print "done.\n";
      }
    }

    print "Searching for set files... ";
    my @setfiles = get_files_with_extension($name, "set");
    if (not scalar(@setfiles)) {
      print "couldn't find any set files, skipping.\n";
    } else {
      print "found " . join(" ", @setfiles) . ".\n";
      foreach my $file (@setfiles) {
	print "Cleaning $file... ";
	clean_file(@bad_nodes, $file);
	print "done.\n";
      }
    }
  } else {
    # carp files
    if (not -e "$name.elem") {
      print "Can't find $name.elem, skipping.\n";
    } else {
      print "Cleaning $name.elem... ";
      clean_file(@bad_nodes, "$name.elem");
      print "done.\n"
    }
    
    print "Searching for tris files... ";
    my @trisfiles = get_files_with_extension($name, "tris");
    if (not scalar(@trisfiles)) {
      print "couldn't find any tris files, skipping.\n";
    } else {
      print "found " . join(" ", @trisfiles) . ".\n";
      foreach my $file (@trisfiles) {
	print "Cleaning $file... ";
	clean_file(@bad_nodes, $file);
	print "done.\n";
      }
    }
  }
}

