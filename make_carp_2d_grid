#!/usr/bin/perl -w

use strict;

sub usage {
#################################3
# P: quit message (optional)
#

  my (@messages) = @_;
  print <<__HERE

<program> meshname.def

where par file where each line is blank, or
  
name = value 

End of line comments start with a #

Here are the options that the program will look for:

# required parameters
tissue = 300 400 # size of the tissue in um
h = 50 # step size along each axis (in um)
fiber = circle # Fiber definition.  Allowed values are
#  horizontal - fibers going from left to right
#  vertical - fibers going up and down
#  curl - fibers going in a circle about the origin
#  radial - fibers pointing to and away from the origin

# Optional parameters
bath = 0 0 # Size of the bath in the x and y axis surrounding the tissue.
angle_variance = 0 # maxium degree variance of fiber direction
rseed = 2 # some number that can be used to re-generate 
          # the random angle variance

Given a parameter file like the above, the code will generate a grid
(surrounded by an optional bath), complete with .pts, .tetras, and .tri 
files.  

Enjoy!

__HERE
    ;

  die join("\n", @messages) if (@messages); 

}
my $pi = 3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679;


sub swap(\$\$) {
###########################################
# swaps two scalars.

  my ($a, $b) = @_;
  my $temp;

  $temp = $$a;
  $$a = $$b;
  $$b = $temp;
}

my $error_msg = "Need to specify parameter file meshname.def on the command line";
usage($error_msg) if not @ARGV;

my $par_file = shift @ARGV;
usage($error_msg) if $par_file !~ m,^(.*)\.def$,;
my $name = $1; 

my %par = read_par_file($par_file);

my @tissue = make_list(assert_there('tissue'));
my $h = assert_there('h');
my $fiber = assert_there('fiber');
my @bath = (0,0);
if (defined($par{bath})) {
    @bath = make_list($par{bath});
}
my $angle_variance = 0;
if (defined($par{angle_variance})) {
    $angle_variance = $par{angle_variance};
}
if (defined($par{rseed})) {
    srand($par{rseed});
} else {
    srand(6858756);
}

my @count;
my @start;
my @bath_count;
  
for (my $i=0; $i<2; $i++) {
  my $length = 2*$bath[$i]+$tissue[$i];
  $start[$i] = -$length/2;
  $count[$i] = int($length/$h);
  $bath_count[$i] = int($bath[$i]/$h);
}

{
  #write the points file
  open(PTS, ">$name.pts") or die "Could not open $name.pts: $!\n";
  print PTS ($count[0]+1)*($count[1]+1) . "\n";

  for (my $j=0; $j<=$count[1]; $j++) {
    for (my $i=0; $i<=$count[0]; $i++) {
      print PTS join(" ", ($i*$h+$start[0], $j*$h+$start[1], 0)) . "\n";
    }
  }
  close(PTS);
}
{
  #make all the hexahedral elements.
  open(ELEM, ">$name.elem") or die "Could not open $name.elem: $!\n";
  print ELEM $count[0]*$count[1] . "\n";
  for (my $y=0; $y<$count[1]; $y++) {
    for (my $x=0; $x<$count[0]; $x++) {
      print ELEM join(" ",
		      (
		       "Qd",
		       get_point($x  , $y  ),
		       get_point($x+1, $y  ),
		       get_point($x+1, $y+1),
		       get_point($x  , $y+1),
		       region_number($x, $y)
		      )
	    ) ."\n";
    }
  }
  close(ELEM);
}

{
  open(LON, ">$name.lon") or die "Could not open $name.lon: $!\n";
  for (my $y=0; $y<$count[1]; $y++) {
    for (my $x=0; $x<$count[0]; $x++) {
      
      print LON join(" ",
		     get_fiber($fiber, $x, $y)
	  ) ."\n";
    }
  }
  close(LON);
}

{
  #make all tri files
  open(TRI, ">$name.tris") or die "Could not open $name.tris: $!\n";
  my $num_triangles = 2*$count[0]*$count[1];
  print TRI "$num_triangles\n";
  for (my $y=0; $y<$count[1]; $y++) {
    for (my $x=0; $x<$count[0]; $x++) {
      print TRI join(" ",
		     (
		      get_point($x  , $y  , 0  ),
		      get_point($x+1, $y  , 0  ),
		      get_point($x+1, $y+1, 0  )
		     )
	  ) ."\n";
      print TRI join(" ",
		     (
		      get_point($x  , $y  , 0  ),
		      get_point($x+1, $y+1, 0  ),
		      get_point($x  , $y+1, 0  )
		     )
	  ) ."\n";
      
    }
  }
  close(TRI);
}

sub get_fiber {
###########################################33
#
#

  my ($type, @coord) = @_;
  return (0,0,0) if region_number(@coord) == 1;

  my @loc = (0,0);
  my $mag = 0;
  for (my $i=0; $i<2; $i++) {
    $loc[$i] = $start[$i]+($coord[$i]+.5)*$h;
    $mag += $loc[$i]**2;
  }
  $mag = sqrt($mag);
  my $angle;
  if ($type eq "radial") {
    #compute the distance between this point and the center.  
    $angle = atan2($loc[1], $loc[0]);
  } elsif ($type eq "curl") {
    my $angle = atan2($loc[1], $loc[0]);
    $angle += $pi/2;
  } elsif ($type eq "horizontal") {
    $angle = 0;
  } elsif ($type eq "vertical") {
    $angle = $pi/2;
  }

  $angle += (2*rand()-1)*$pi*$angle_variance/180;

  return (cos($angle), sin($angle), 0);
}

sub region_number {
#########################################
#
#

  my (@coord) = @_;

  for (my $i=0; $i<2; $i++) {
    return 1 if $coord[$i] <  $bath_count[$i];
    return 1 if $coord[$i] >= $count[$i]-$bath_count[$i];
  }

  return 0;

}

sub get_point {
##########################################
# P: coord
# R: index in pts file
  
  my (@coord) = @_;
  
  return $coord[0]+($count[0]+1)*$coord[1];
}

sub assert_there {
##########################################
# returns true if a value is defined
  my ($name) = @_;

  usage("Error: name '$name' does not exist in the par file!") if not $par{$name};
  return $par{$name};
}

sub make_list {
#######################################
# P: text
# R: list where each item is separated by a space

  my ($text) = @_;

  return split(/\s+/, strip($text));
}

sub read_par_file {
##########################################3
# P: $par_file
#  file to open
# R: hash containing par file

  my ($par_file) = @_;

  open(FILE, $par_file) or usage("Canot open par file $par_file: $!\n");

  my %ret_hash;
  foreach my $line (<FILE>) {
    $line =~ s,#.*,,;
    $line = strip($line);
    
    next if not $line;
    usage("Invalid parameter file line '$line'") if not ($line =~ /=/);
    
    my ($name, $value) = split(/\s*=\s*/, $line);
    usage("Invlid name/value pair '$name' => '$value'") if not ($name and $value);
    
    $ret_hash{$name} = $value;
    
  }
  close(FILE);
  
  return %ret_hash;

}



sub strip {
###########################################################
# P: $text
# R: $text with leading and trailing whitespace removed

  my ($text) = @_;

  $text =~ s,^\s*,,;
  $text =~ s,\s*$,,;

  return $text;
}

