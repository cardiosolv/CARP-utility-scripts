#!/usr/bin/env python

import sys
import re
import os
import optparse
import shutil


try:
   from numpy import *
   import scipy as Sci
   import scipy.linalg
   _have_scipy = True
except (ImportError), e:
   print """
Scipy not installed.  Run the following command to install it. 
sudo yum install scipy
Without scipy, I can't convert .spec files to .lon files.
"""
   _have_scipy = False


def eig_direction(mat, sheet_normals):
   '''
   P: a python matrix, 3x3, that comes from a spec file
   R: the direction of the fiber described by that matrix.
   Returns 0 0 0 if it encounters a bath tensor.
   '''
   L,V = linalg.eig(array(mat));
   max_index = argsort(L).tolist()
   max_index.reverse()
   index_long = max_index[0]
   index_transverse = max_index[1]
   if abs(L[index_long]-L[index_transverse]) < 1e-6:
      if sheet_normals:
         return [0,0,0,0,0,0];
      else:
         return [0,0,0];
   else:
      if sheet_normals:
         return list(V[:,index_long]) + list(V[:,index_transverse])
      else:
         return list(V[:,index_long])

# A simple class to help me parse options into a dictionary.
# Sometimes, dictionaries are easier to manipulate than objects.
class DictOptionParser(optparse.OptionParser):
   def parse_args(self, *args, **keywords):
      keywords["values"] = _blank()
      (options, args) = optparse.OptionParser.parse_args(self, *args, **keywords)
      return (options.__dict__, args)
class _blank:
   pass

if __name__=="__main__":
   if not _have_scipy:
      sys.exit(1)

   parser = DictOptionParser(usage="Usage: %prog [options] meshname")
   parser.add_option("-s", "--special_regions",
                     dest="special_regions",
                     help="Comma separated list of special regions.",
                     )
   parser.add_option("-n", "--sheet_normals",
                     dest="sheet_normals",
                     help="Look for sheet normals as well in the .spec and .mem.cond files.",
                     default=False,
                     action="store_true",
                     )
   (options, args) = parser.parse_args()
   if len(args) != 1:
      print "Need the input meshname."
      parser.print_help()
      sys.exit(1)
   mname = args[0];
   dim = 3;
   
   sregions = []
   if options.has_key("special_regions"):
      for r in options["special_regions"].split(","):
         sregions.append(int(r));


   if os.path.isfile(mname+".pts"):
      print "Processing the pts file"
      in_file = open(mname+".pts", "r");
      out_file = open("carp."+mname+".pts", "w");
      
      #Print the header
      print >>out_file, in_file.readline(),
      
      conversion_factor = 1000.
      for line in in_file:
         values = re.split(r'\s+',line[:-1]);
         values = [str(float(value) * conversion_factor) for value in values]
         print >>out_file, " ".join(values)
      del out_file
      del in_file
   else:
      print "Can't find pts file, skipping."

   base_conds = []
   ifile = file(mname+".mem.cond",  "r");
   tlist = ifile.readline().split();
   numcond = int(tlist[0]);

   for i in range(0, numcond):
      base_conds.append([float(v) for v in ifile.readline().split()]);

   del ifile;
   #print "base_conds = ", base_conds


   #if in special region, get from file, else get from region in base_conds

   print "Working on conductivities and elements..."
   print "sregions = ", sregions;

   ifile = file(mname+".tetras", "r");
   ntets = int(ifile.readline());
   ofile = file("carp."+mname+".elem", "w");
   print >>ofile, ntets;

   olonfile = file("carp."+mname+".lon", "w");
   if options["sheet_normals"]:
      print >>olonfile, "2"

   if(len(sregions)>0):
      if os.path.isfile(mname+".spec"):
         special_type = "spec"
         sfile = open(mname+".spec", "r");
      elif os.path.isfile(mname+".fibers"):
         special_type = "fibers"
         sfile = open(mname+".fibers", "r");

   for line in ifile:
      tlist = re.split(r'\s+', line[:-1]);
      tlist[0:4] = [str(int(v)-1) for v in tlist[0:4]]
      print >>ofile, "Tt %s" % " ".join(tlist)
      region = int(tlist[4]);

      #if elem is in special region
      if region in sregions:
         if special_type=="fibers":
            fiber = re.split(r'\s+', sfile.readline())
            print >>olonfile, " ".join(fiber[0:3])
            continue
         elif special_type=="spec":
            econd = sfile.readline().split();
      else:
         econd = base_conds[region-1];

      start = dim*(dim+1)/2;

      if(dim==3):
         cond = array(((econd[start+0],econd[start+1],econd[start+2]), (econd[start+1],econd[start+3],econd[start+4]), (econd[start+2],econd[start+4],econd[start+5])));
      else:
         cond = array (((econd[start+0],econd[start+1]), (econd[start+0],econd[start+2])));
   
      #get fiber direction from econd
      direction = eig_direction(cond, options["sheet_normals"]);
      #print it out to file
      print >>olonfile, " ".join(["%g" % v for v in direction])

   del olonfile;
   del ifile;
   del ofile;

   print "Done!"


